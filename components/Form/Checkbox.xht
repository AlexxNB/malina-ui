<script>
    import {Icon} from './../index';
    import {check,spinner} from './../../icons';
    import {choose,isSlot} from '../../lib/utils';

    export let checked = false;
    export let value = false;
    export let group = [];

    //States
    export let error = false;
    export let warning = false;
    export let success = false;
    export let loading = false;
    export let disabled = false;

    $: checked,()=>{
            if(!!checked === group.includes(value)) return;
            checked ? group.push(value) : group=group.filter(v=>v!==value);
    }

    $: group,()=>{
        if(!group.includes(value)) checked=false;
    }

    $: stateClasses = choose(
        ['bd-error txt-error','bd-success txt-success','bd-warning txt-warning'],
        [ error,  success,  warning],
      'bd-neutral txt-primary');
</script>

<label ^label class="$label" class:loading class:disabled>
    <input 
        type="checkbox" 
        class="$main"
        {disabled}
        {value}
        {...$attributes}
        :checked={checked}  
    @@ ^/>
    <div class="{stateClasses} $checkbox" ^checkbox>
        <span>
            {#if loading}
                <Icon src={spinner} size="1.8rem" spin="0.5"/>
            {:else}
                <Icon src={check} size="1.8rem"/>
            {/if}
        </span>
    </div>
    <slot/>
</label>

<style>
    label{
        cursor: pointer;
    }
    input {
        position: absolute;
        z-index: -1;
        opacity: 0;
    }
    input+div {
        user-select: none;
        display: inline-block;
        border-width: 1px;
        background-color: var(--color-bg);
        width: 2rem;
        height: 2rem;
        border-radius: .3rem;
        margin-bottom: .2rem;
        margin-right: .2rem;
        vertical-align: middle;
    }
    input+div span{
        display: block;
        line-height: .5rem;
        opacity: 0;
        transition: opacity .25s, border-color .25s;
    }

    input:checked+div span,.loading input+div span{
        display: block;
        line-height: .5rem;
        opacity: 1;
    }

    input:focus+div{
        border-color: var(--color-primary);
        box-shadow: var(--input-shadow-primary);
    }

    input:focus+div.bd-error{
        box-shadow: var(--input-shadow-error);
    }

    input:focus+div.bd-success{
        box-shadow: var(--input-shadow-success);
    }

    input:focus+div.bd-warning{
        box-shadow: var(--input-shadow-warning);
    }

    .loading {
        pointer-events: none;
        opacity: .6;
    }

    .disabled {
        opacity: .4;
    }
    
</style>